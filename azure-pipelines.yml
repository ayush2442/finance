trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  containerRegistry: 'financeappacr-connection'
  imageRepository: 'finance-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  azureSubscription: 'azure-finance-connection'
  resourceGroup: 'rg-finance-app'
  containerInstanceName: 'finance-app-aci'

  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build and Push Image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@3
            displayName: 'Maven Build'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile test package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Docker@2
            displayName: 'Build and push image'
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(containerRegistry)
              tags: |
                $(tag)
                latest

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              failTaskOnFailedTests: true
            condition: always()

  - stage: Deploy
    displayName: Deploy to ACI
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: 'testing'
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Deploy to Azure Container Instance'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az container delete \
                        --resource-group $(resourceGroup) \
                        --name $(containerInstanceName) \
                        --yes || true
                      
                      az container create \
                        --resource-group $(resourceGroup) \
                        --name $(containerInstanceName) \
                        --image $(containerRegistry)/$(imageRepository):$(tag) \
                        --dns-name-label finance-app-$(Build.BuildId) \
                        --ports 8080 \
                        --cpu 1 \
                        --memory 2 \
                        --registry-server $(containerRegistry) \
                        --registry-username $(acrUsername) \
                        --registry-password $(acrPassword) \
                        --environment-variables \
                          SPRING_PROFILES_ACTIVE=testing \
                          SERVER_PORT=8080 \
                        --restart-policy OnFailure
                      
                      echo "Waiting for container to be ready..."
                      sleep 30
                      
                      az container show \
                        --resource-group $(resourceGroup) \
                        --name $(containerInstanceName) \
                        --query "{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}" \
                        --output table
                      env:
                        acrUsername: $(acrUsername)
                        acrPassword: $(acrPassword)

  - stage: Test
    displayName: Automated Testing
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: IntegrationTests
        displayName: 'Integration Tests'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '18.x'

          - task: AzureCLI@2
            displayName: 'Run Integration Tests'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                FQDN=$(az container show \
                  --resource-group $(resourceGroup) \
                  --name $(containerInstanceName) \
                  --query "ipAddress.fqdn" \
                  --output tsv)
                
                echo "Testing application at: http://$FQDN:8080"
                
                npm install -g newman
                
                curl -f http://$FQDN:8080/health || exit 1
                
                curl -f http://$FQDN:8080/api/finance/status || exit 1
                
                echo "All tests passed successfully!"

  - stage: Monitor
    displayName: Setup Monitoring
    dependsOn: Test
    condition: succeeded()
    jobs:
      - job: SetupMonitoring
        displayName: 'Setup Application Monitoring'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: AzureCLI@2
            displayName: 'Configure Application Insights'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az monitor app-insights component create \
                  --app finance-app-insights \
                  --location eastus \
                  --resource-group $(resourceGroup) \
                  --kind web \
                  --application-type web
                
                INSTRUMENTATION_KEY=$(az monitor app-insights component show \
                  --app finance-app-insights \
                  --resource-group $(resourceGroup) \
                  --query "instrumentationKey" \
                  --output tsv)
                
                echo "Application Insights configured with key: $INSTRUMENTATION_KEY"